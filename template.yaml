AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: core infrastructure definitions

Parameters:
  DataBucket:
    Type: String
    Description: S3 bucket to store data
  SchedulerEnabled:
    Type: String
    Description: Toggle scheduler on or off
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  NumeraiPublicID:
    Type: String
    Description: Numerai public ID
  NumeraiSecretKey:
    Type: String
    Description: Numerai secret key
  SourceEmail:
    Type: String
    Description: Source email address to send notifications from
  StripeAPIKey:
    Type: String
    Description: Stripe API key
  CertificateARN:
    Type: String
    Description: AWS managed certificate ARN

Mappings:
  SchedulerToggle:
    Toggle:
      'true': true
      'false': false

Resources:
  uploadsBucket:
    Type: AWS::S3::Bucket
    Properties:      
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
      BucketName:
        Fn::Sub: "${AWS::StackName}-uploads-${AWS::Region}-${AWS::AccountId}"
  modelsBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
      BucketName:
        Fn::Sub: "${AWS::StackName}-models-${AWS::Region}-${AWS::AccountId}"
  outputsBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
      BucketName:
        Fn::Sub: "outputs-${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"
  dataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/lambda/data/
      Description: function responsible for fetching and storing tournament data
      Environment:
        Variables:
          DATA_BUCKET_NAME:
            Ref: DataBucket
          NUMERAI_PUBLIC_ID:
            Ref: NumeraiPublicID
          NUMERAI_SECRET_KEY:
            Ref: NumeraiSecretKey
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Description: periodic check for new tournament data
            Enabled:
              Fn::FindInMap:
                - SchedulerToggle
                - Toggle
                - Ref: SchedulerEnabled
            Schedule: cron(0 12 * * ? *) # UPDATE TO RUN HOURLY ON SATURDAY / SUNDAY
      Handler: main.handler
      MemorySize: 1024
      Runtime: python3.7
      Timeout: 120
  usersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/lambda/users/
      Description: function responsible for adding new users to the application
      Environment:
        Variables:
          STRIPE_API_KEY:
            Ref: StripeAPIKey
          USERS_TABLE_NAME:
            Ref: usersTable
      Events:
        UserEvent:
          Type: Api
          Properties:
            Method: POST
            Path: /users
            RestApiId:
              Ref: api
      Handler: main.handler
      MemorySize: 256
      Runtime: python3.7
      Timeout: 15
  modelsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/lambda/models/
      Description: function responsible generating model upload URLs
      Environment:
        Variables:
          MODELS_BUCKET_NAME:
            Fn::Sub: "${AWS::StackName}-models-${AWS::Region}-${AWS::AccountId}"
          USERS_TABLE_NAME:
            Ref: usersTable
      Events:
        ModelEvent:
          Type: Api
          Properties:
            Method: GET
            Path: /models
            RestApiId:
              Ref: api
      Handler: main.handler
      MemorySize: 256
      Policies:
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: 
                Fn::GetAtt:
                  - usersTable
                  - Arn
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: 
                Fn::Sub: "arn:aws:s3:::${AWS::StackName}-models-${AWS::Region}-${AWS::AccountId}*"
      Runtime: python3.7
      Timeout: 15
  starterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/lambda/starter/
      Description: function responsible for parsing uploads and starting model training flow
      Environment:
        Variables:
          MODELS_BUCKET_NAME:
            Fn::Sub: "${AWS::StackName}-models-${AWS::Region}-${AWS::AccountId}"
          USERS_TABLE_NAME:
            Ref: usersTable
          SOURCE_EMAIL:
            Ref: SourceEmail
      Events:
        starterEvent:
          Type: S3
          Properties:
            Bucket:
              Ref: uploadsBucket
            Events: s3:ObjectCreated:*
      Handler: main.handler
      MemorySize: 256
      Runtime: python3.7
      Timeout: 30
  builderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/lambda/builder/
      Description: function responsible for training and inferring models
      Environment:
        Variables:
          OUTPUTS_BUCKET_NAME:
            Fn::Sub: "${AWS::StackName}-outputs-${AWS::Region}-${AWS::AccountId}"
          DATA_BUCKET_NAME:
            Ref: DataBucket
      Events:
        builderEvent:
          Type: S3
          Properties:
            Bucket:
              Ref: modelsBucket
            Events: s3:ObjectCreated:*
      Handler: main.handler
      MemorySize: 528
      Policies:
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: 
                Fn::Sub: "arn:aws:s3:::${AWS::StackName}-outputs-${AWS::Region}-${AWS::AccountId}*"
      Runtime: python3.7
      Timeout: 60
  usersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
  api:
    Type: AWS::Serverless::Api
    Properties:
      Domain:
        CertificateArn:
          Ref: CertificateARN
        DomainName: numermatic.com
      StageName: prod

Outputs:
  UsersTableName:
    Value:
      Ref: usersTable
  UsersAPIEndpoint:
    Description: Endpoint for receiving add user requests
    Value:
      Fn::Sub: https://${api}.execute-api.${AWS::Region}.amazonaws.com/prod/users
  ModelsAPIEndpoint:
    Description: Endpoint for receiving model resources
    Value:
      Fn::Sub: https://${api}.execute-api.${AWS::Region}.amazonaws.com/prod/models